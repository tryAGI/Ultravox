openapi: 3.0.4
info:
  title: Ultravox
  description: API for the Ultravox service.
  version: 0.1.0
servers:
  - url: https://api.ultravox.ai
paths:
  /api/accounts:
    get:
      tags:
        - accounts
      operationId: accounts_list
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
        - apiKeyAuth: [ ]
  /api/accounts/me:
    get:
      tags:
        - accounts
      operationId: accounts_me_retrieve
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
      security:
        - apiKeyAuth: [ ]
  /api/api_keys:
    get:
      tags:
        - api_keys
      description: Gets the current user's API keys.
      operationId: api_keys_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAPIKeyList'
    post:
      tags:
        - api_keys
      description: Creates a new API key.
      operationId: api_keys_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKeyCreate'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyCreate'
  '/api/api_keys/{api_key_prefix}':
    get:
      tags:
        - api_keys
      description: Gets an API key.
      operationId: api_keys_retrieve
      parameters:
        - name: api_key_prefix
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
    put:
      tags:
        - api_keys
      description: Updates an API key.
      operationId: api_keys_update
      parameters:
        - name: api_key_prefix
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
    patch:
      tags:
        - api_keys
      description: Updates an API key.
      operationId: api_keys_partial_update
      parameters:
        - name: api_key_prefix
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAPIKey'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
    delete:
      tags:
        - api_keys
      description: Deletes an API key.
      operationId: api_keys_destroy
      parameters:
        - name: api_key_prefix
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No response body
  /api/calls:
    get:
      tags:
        - calls
      operationId: calls_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: durationMax
          in: query
          description: Maximum duration of calls
          schema:
            type: string
        - name: durationMin
          in: query
          description: Minimum duration of calls
          schema:
            type: string
        - name: fromDate
          in: query
          description: Start date (inclusive) for filtering calls by creation date
          schema:
            type: string
            format: date
        - name: metadata
          in: query
          description: Filter calls by metadata. Use metadata.key=value to filter by specific key-value pairs.
          schema:
            type: object
            additionalProperties:
              type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: search
          in: query
          description: The search string used to filter results
          schema:
            minLength: 1
            type: string
        - name: toDate
          in: query
          description: End date (inclusive) for filtering calls by creation date
          schema:
            type: string
            format: date
        - name: voiceId
          in: query
          description: Filter calls by the associated voice ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCallList'
      security:
        - apiKeyAuth: [ ]
    post:
      tags:
        - calls
      operationId: calls_create
      parameters:
        - name: enableGreetingPrompt
          in: query
          description: Adds a prompt for a greeting if there's not an initial message that the model would naturally respond to (a user message or tool result).
          schema:
            type: boolean
            default: true
        - name: priorCallId
          in: query
          description: 'The UUID of a prior call. When specified, the new call will use the same properites as the prior call unless overriden in this request''s body. The new call will also use the prior call''s message history as its own initial_messages. (It''s illegal to also set initial_messages in the body.)'
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.StartCallRequest'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}':
    get:
      tags:
        - calls
      operationId: calls_retrieve
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/messages':
    get:
      tags:
        - calls
      operationId: calls_messages_list
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginatedultravox.v1.MessageList'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/recording':
    get:
      tags:
        - calls
      operationId: calls_recording_retrieve
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: No response body
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/stages':
    get:
      tags:
        - calls
      operationId: calls_stages_list
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCallStageList'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/stages/{call_stage_id}':
    get:
      tags:
        - calls
      operationId: calls_stages_retrieve
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: call_stage_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallStage'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/stages/{call_stage_id}/messages':
    get:
      tags:
        - calls
      operationId: calls_stages_messages_list
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: call_stage_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginatedultravox.v1.MessageList'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/stages/{call_stage_id}/messages/{call_stage_message_index}/audio':
    get:
      tags:
        - calls
      operationId: calls_stages_messages_audio_retrieve
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: call_stage_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: call_stage_message_index
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: No response body
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/stages/{call_stage_id}/tools':
    get:
      tags:
        - calls
      operationId: calls_stages_tools_list
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: call_stage_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CallTool'
      security:
        - apiKeyAuth: [ ]
  '/api/calls/{call_id}/tools':
    get:
      tags:
        - calls
      operationId: calls_tools_list
      parameters:
        - name: call_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CallTool'
      security:
        - apiKeyAuth: [ ]
  /api/corpora:
    get:
      tags:
        - corpora
      operationId: corpora_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginatedultravox.v1.CorpusList'
      security:
        - apiKeyAuth: [ ]
    post:
      tags:
        - corpora
      operationId: corpora_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.Corpus'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.Corpus'
      security:
        - apiKeyAuth: [ ]
  '/api/corpora/{corpus_id}':
    get:
      tags:
        - corpora
      operationId: corpora_retrieve
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.Corpus'
      security:
        - apiKeyAuth: [ ]
    put:
      tags:
        - corpora
      operationId: corpora_update
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.Corpus'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.Corpus'
      security:
        - apiKeyAuth: [ ]
    patch:
      tags:
        - corpora
      operationId: corpora_partial_update
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.Corpus'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.Corpus'
      security:
        - apiKeyAuth: [ ]
    delete:
      tags:
        - corpora
      operationId: corpora_destroy
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No response body
      security:
        - apiKeyAuth: [ ]
  '/api/corpora/{corpus_id}/query':
    post:
      tags:
        - corpora
      operationId: corpora_query
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.QueryCorpusRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ultravox.v1.CorpusQueryResult'
      security:
        - apiKeyAuth: [ ]
  '/api/corpora/{corpus_id}/sources':
    get:
      tags:
        - corpora
      operationId: corpora_sources_list
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginatedultravox.v1.CorpusSourceList'
      security:
        - apiKeyAuth: [ ]
    post:
      tags:
        - corpora
      operationId: corpora_sources_create
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.CorpusSource'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.CorpusSource'
      security:
        - apiKeyAuth: [ ]
  '/api/corpora/{corpus_id}/sources/{source_id}':
    get:
      tags:
        - corpora
      operationId: corpora_sources_retrieve
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.CorpusSource'
      security:
        - apiKeyAuth: [ ]
    put:
      tags:
        - corpora
      operationId: corpora_sources_update
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.CorpusSource'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.CorpusSource'
      security:
        - apiKeyAuth: [ ]
    patch:
      tags:
        - corpora
      operationId: corpora_sources_partial_update
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ultravox.v1.CorpusSource'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.CorpusSource'
      security:
        - apiKeyAuth: [ ]
    delete:
      tags:
        - corpora
      operationId: corpora_sources_destroy
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No response body
      security:
        - apiKeyAuth: [ ]
  '/api/corpora/{corpus_id}/sources/{source_id}/documents':
    get:
      tags:
        - corpora
      operationId: corpora_sources_documents_list
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Paginatedultravox.v1.CorpusDocumentList'
      security:
        - apiKeyAuth: [ ]
  '/api/corpora/{corpus_id}/sources/{source_id}/documents/{document_id}':
    get:
      tags:
        - corpora
      operationId: corpora_sources_documents_retrieve
      parameters:
        - name: corpus_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ultravox.v1.CorpusDocument'
      security:
        - apiKeyAuth: [ ]
  /api/models:
    get:
      tags:
        - models
      operationId: models_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedModelAliasList'
      security:
        - apiKeyAuth: [ ]
  /api/schema/:
    get:
      tags:
        - schema
      description: "OpenApi3 schema for this API. Format can be selected via content negotiation.\n\n- YAML: application/vnd.oai.openapi\n- JSON: application/vnd.oai.openapi+json"
      operationId: schema_retrieve
      parameters:
        - name: format
          in: query
          schema:
            enum:
              - json
              - yaml
            type: string
        - name: lang
          in: query
          schema:
            enum:
              - af
              - ar
              - ar-dz
              - ast
              - az
              - be
              - bg
              - bn
              - br
              - bs
              - ca
              - ckb
              - cs
              - cy
              - da
              - de
              - dsb
              - el
              - en
              - en-au
              - en-gb
              - eo
              - es
              - es-ar
              - es-co
              - es-mx
              - es-ni
              - es-ve
              - et
              - eu
              - fa
              - fi
              - fr
              - fy
              - ga
              - gd
              - gl
              - he
              - hi
              - hr
              - hsb
              - hu
              - hy
              - ia
              - id
              - ig
              - io
              - is
              - it
              - ja
              - ka
              - kab
              - kk
              - km
              - kn
              - ko
              - ky
              - lb
              - lt
              - lv
              - mk
              - ml
              - mn
              - mr
              - ms
              - my
              - nb
              - ne
              - nl
              - nn
              - os
              - pa
              - pl
              - pt
              - pt-br
              - ro
              - ru
              - sk
              - sl
              - sq
              - sr
              - sr-latn
              - sv
              - sw
              - ta
              - te
              - tg
              - th
              - tk
              - tr
              - tt
              - udm
              - ug
              - uk
              - ur
              - uz
              - vi
              - zh-hans
              - zh-hant
            type: string
      responses:
        '200':
          description: ''
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: { }
            application/yaml:
              schema:
                type: object
                additionalProperties: { }
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: { }
            application/json:
              schema:
                type: object
                additionalProperties: { }
      security:
        - { }
  /api/tools:
    get:
      tags:
        - tools
      description: List all tools in your account.
      operationId: tools_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: ownership
          in: query
          description: The ownership used to filter results
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: search
          in: query
          description: The search string used to filter results
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedToolList'
      security:
        - apiKeyAuth: [ ]
    post:
      tags:
        - tools
      operationId: tools_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  description: An OpenAPI schema file in either JSON or YAML format.
                  format: binary
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
        - apiKeyAuth: [ ]
  '/api/tools/{tool_id}':
    get:
      tags:
        - tools
      operationId: tools_retrieve
      parameters:
        - name: tool_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
        - apiKeyAuth: [ ]
    put:
      tags:
        - tools
      operationId: tools_update
      parameters:
        - name: tool_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tool'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
      security:
        - apiKeyAuth: [ ]
    delete:
      tags:
        - tools
      operationId: tools_destroy
      parameters:
        - name: tool_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No response body
      security:
        - apiKeyAuth: [ ]
  '/api/tools/{tool_id}/history':
    get:
      tags:
        - tools
      operationId: tools_history_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: tool_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedToolHistoryList'
      security:
        - apiKeyAuth: [ ]
  '/api/tools/{tool_id}/test':
    post:
      tags:
        - tools
      description: Test a tool by executing it with the provided parameters.
      operationId: tools_test_create
      parameters:
        - name: tool_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: ''
          content:
            '*/*':
              schema: { }
      security:
        - apiKeyAuth: [ ]
  /api/voices:
    get:
      tags:
        - voices
      description: List all voices in your account.
      operationId: voices_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: ownership
          in: query
          description: The ownership used filter results
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
        - name: search
          in: query
          description: The search string used to filter results
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVoiceList'
      security:
        - apiKeyAuth: [ ]
    post:
      tags:
        - voices
      description: Create a new cloned voice from an audio sample. The created voice will be private to your account.
      operationId: voices_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
                - name
              type: object
              properties:
                file:
                  type: string
                  description: An audio file containing a sample of the voice to clone.
                  format: binary
                name:
                  type: string
                  description: Name for the cloned voice. Must be unique within your account.
                  example: My Custom Voice
                description:
                  type: string
                  description: 'Optional description for the voice. If not provided, a default description will be generated.'
                  example: 'Voice recorded on Jan 1, 2024'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voice'
      security:
        - apiKeyAuth: [ ]
      x-codeSamples:
        - lang: curl
          source: "curl --request POST \\\n--url https://api.ultravox.ai/api/voices \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'X-API-Key: <your-api-key>' \\\n--form 'file=@/path/to/voice.mp3' \\\n--form 'name=My Custom Voice' \\\n--form 'description=Voice recorded on Jan 1, 2024'"
  '/api/voices/{voice_id}':
    get:
      tags:
        - voices
      operationId: voices_retrieve
      parameters:
        - name: voice_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voice'
      security:
        - apiKeyAuth: [ ]
    delete:
      tags:
        - voices
      operationId: voices_destroy
      parameters:
        - name: voice_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No response body
      security:
        - apiKeyAuth: [ ]
  /api/webhooks:
    get:
      tags:
        - webhooks
      operationId: webhooks_list
      parameters:
        - name: cursor
          in: query
          description: The pagination cursor value.
          schema:
            type: string
        - name: pageSize
          in: query
          description: Number of results to return per page.
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWebhookList'
      security:
        - apiKeyAuth: [ ]
    post:
      tags:
        - webhooks
      operationId: webhooks_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      security:
        - apiKeyAuth: [ ]
  '/api/webhooks/{webhook_id}':
    get:
      tags:
        - webhooks
      operationId: webhooks_retrieve
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      security:
        - apiKeyAuth: [ ]
    put:
      tags:
        - webhooks
      operationId: webhooks_update
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      security:
        - apiKeyAuth: [ ]
    patch:
      tags:
        - webhooks
      operationId: webhooks_partial_update
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWebhook'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      security:
        - apiKeyAuth: [ ]
    delete:
      tags:
        - webhooks
      operationId: webhooks_destroy
      parameters:
        - name: webhook_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No response body
      security:
        - apiKeyAuth: [ ]
components:
  schemas:
    APIKey:
      required:
        - created
        - creator
        - expiryDate
        - name
        - prefix
      type: object
      properties:
        prefix:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        creator:
          type: string
          nullable: true
          readOnly: true
        name:
          type: string
          description: A free-form name for the API key. Need not be unique. 50 characters max.
          readOnly: true
        expiryDate:
          title: Expires
          type: string
          description: 'Once API key expires, clients cannot use it anymore.'
          format: date-time
          nullable: true
          readOnly: true
        revoked:
          type: boolean
          description: 'If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)'
    APIKeyCreate:
      required:
        - created
        - creator
        - name
        - prefix
        - revoked
        - secret
      type: object
      properties:
        prefix:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        creator:
          type: string
          nullable: true
          readOnly: true
        secret:
          type: string
          description: The API key itself. Will be generated on creation but not returned in future requests.
          readOnly: true
        revoked:
          type: boolean
          description: 'If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)'
          readOnly: true
        name:
          maxLength: 50
          type: string
          description: A free-form name for the API key. Need not be unique. 50 characters max.
        expiryDate:
          title: Expires
          type: string
          description: 'Once API key expires, clients cannot use it anymore.'
          format: date-time
          nullable: true
    Account:
      required:
        - activeCalls
        - allowedConcurrentCalls
        - allowedVoices
        - billingUrl
        - freeTimeRemaining
        - freeTimeUsed
        - hasActiveSubscription
        - name
      type: object
      properties:
        name:
          type: string
          readOnly: true
        billingUrl:
          type: string
          readOnly: true
        freeTimeUsed:
          type: string
          description: How much free time has been used by previous (or ongoing) calls.
          readOnly: true
        freeTimeRemaining:
          type: string
          description: How much free call time this account has remaining. (This could increase if an existing call ends without using its maximum duration or an unjoined call times out.)
          readOnly: true
        hasActiveSubscription:
          type: boolean
          description: Whether the account has an active subscription.
        activeCalls:
          type: integer
          description: The number of active calls for this account.
          readOnly: true
        allowedConcurrentCalls:
          type: integer
          description: The maximum number of concurrent calls allowed for this account.
          readOnly: true
        allowedVoices:
          type: integer
          description: The maximum number of custom voices allowed for this account.
          readOnly: true
    Call:
      required:
        - callId
        - clientVersion
        - created
        - endReason
        - ended
        - errorCount
        - experimentalSettings
        - firstSpeaker
        - firstSpeakerSettings
        - initialOutputMedium
        - joinUrl
        - joined
        - metadata
        - shortSummary
        - summary
      type: object
      properties:
        callId:
          type: string
          format: uuid
          readOnly: true
        clientVersion:
          type: string
          description: The version of the client that joined this call.
          nullable: true
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        joined:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        ended:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        endReason:
          oneOf:
            - $ref: '#/components/schemas/EndReasonEnum'
            - $ref: '#/components/schemas/NullEnum'
          description: "The reason the call ended.\n\n* `unjoined` - Client never joined\n* `hangup` - Client hung up\n* `agent_hangup` - Agent hung up\n* `timeout` - Call timed out\n* `connection_error` - Connection error"
          nullable: true
          readOnly: true
        firstSpeaker:
          allOf:
            - $ref: '#/components/schemas/FirstSpeakerEnum'
          description: Who was supposed to talk first when the call started. Typically set to FIRST_SPEAKER_USER for outgoing calls and left as the default (FIRST_SPEAKER_AGENT) otherwise.
          readOnly: true
          deprecated: true
        firstSpeakerSettings:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.FirstSpeakerSettings'
          description: Settings for the initial message to get the call started.
        inactivityMessages:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.TimedMessage'
          description: 'Messages spoken by the agent when the user is inactive for the specified duration. Durations are cumulative, so a message m > 1 with duration 30s will be spoken 30 seconds after message m-1.'
        initialOutputMedium:
          allOf:
            - $ref: '#/components/schemas/InitialOutputMediumEnum'
          description: The medium used initially by the agent. May later be changed by the client.
          readOnly: true
        joinTimeout:
          type: string
          default: 30s
        joinUrl:
          type: string
          nullable: true
          readOnly: true
        languageHint:
          maxLength: 16
          type: string
          description: BCP47 language code that may be used to guide speech recognition.
          nullable: true
        maxDuration:
          type: string
          default: 3600s
        medium:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium'
          nullable: true
        model:
          type: string
          default: fixie-ai/ultravox
        recordingEnabled:
          type: boolean
          default: false
        systemPrompt:
          type: string
          nullable: true
        temperature:
          maximum: 1.0
          minimum: 0.0
          type: number
          format: double
          default: 0
        timeExceededMessage:
          type: string
          nullable: true
        voice:
          type: string
          nullable: true
        transcriptOptional:
          type: boolean
          description: Indicates whether a transcript is optional for the call.
          default: true
          deprecated: true
        errorCount:
          type: integer
          description: The number of errors in this call.
          default: 0
          readOnly: true
        vadSettings:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.VadSettings'
          description: VAD settings for the call.
          nullable: true
        shortSummary:
          type: string
          description: A short summary of the call.
          nullable: true
          readOnly: true
        summary:
          type: string
          description: A summary of the call.
          nullable: true
          readOnly: true
        experimentalSettings:
          description: Experimental settings for the call.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Optional metadata key-value pairs to associate with the call. All values must be strings.
    CallStage:
      required:
        - callId
        - callStageId
        - created
        - errorCount
        - experimentalSettings
        - temperature
      type: object
      properties:
        callId:
          type: string
          format: uuid
          readOnly: true
        callStageId:
          type: string
          format: uuid
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        inactivityMessages:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.TimedMessage'
          description: 'Messages spoken by the agent when the user is inactive for the specified duration. Durations are cumulative, so a message m > 1 with duration 30s will be spoken 30 seconds after message m-1.'
        languageHint:
          maxLength: 16
          type: string
          description: BCP47 language code that may be used to guide speech recognition.
          nullable: true
        model:
          type: string
          default: fixie-ai/ultravox
        systemPrompt:
          type: string
          nullable: true
        temperature:
          type: number
          format: double
          readOnly: true
        timeExceededMessage:
          type: string
          nullable: true
        voice:
          type: string
          nullable: true
        errorCount:
          type: integer
          description: The number of errors in this call stage.
          readOnly: true
        experimentalSettings:
          description: Experimental settings for this call stage.
          nullable: true
          readOnly: true
    CallTool:
      required:
        - callToolId
        - definition
        - name
        - toolId
      type: object
      properties:
        callToolId:
          type: string
          format: uuid
          readOnly: true
        toolId:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        name:
          type: string
          description: The possibly overridden name of the tool.
          readOnly: true
        definition:
          $ref: '#/components/schemas/ultravox.v1.CallTool'
    EndReasonEnum:
      enum:
        - unjoined
        - hangup
        - agent_hangup
        - timeout
        - connection_error
      type: string
      description: "* `unjoined` - Client never joined\n* `hangup` - Client hung up\n* `agent_hangup` - Agent hung up\n* `timeout` - Call timed out\n* `connection_error` - Connection error"
    EventsEnum:
      enum:
        - call.started
        - call.joined
        - call.ended
      type: string
      description: "* `call.started` - Fired when a call starts\n* `call.joined` - Fired when a call is joined\n* `call.ended` - Fired when a call ends"
    FirstSpeakerEnum:
      enum:
        - FIRST_SPEAKER_AGENT
        - FIRST_SPEAKER_USER
      type: string
    InitialOutputMediumEnum:
      enum:
        - MESSAGE_MEDIUM_VOICE
        - MESSAGE_MEDIUM_TEXT
      type: string
    ModelAlias:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The alias name.
          readOnly: true
    NullEnum:
      enum:
        - 
    OwnershipEnum:
      enum:
        - public
        - private
      type: string
    PaginatedAPIKeyList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/APIKey'
        total:
          type: integer
          example: 123
    PaginatedCallList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/Call'
        total:
          type: integer
          example: 123
    PaginatedCallStageList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/CallStage'
        total:
          type: integer
          example: 123
    PaginatedModelAliasList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ModelAlias'
        total:
          type: integer
          example: 123
    PaginatedToolHistoryList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ToolHistory'
        total:
          type: integer
          example: 123
    PaginatedToolList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
        total:
          type: integer
          example: 123
    PaginatedVoiceList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/Voice'
        total:
          type: integer
          example: 123
    PaginatedWebhookList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
        total:
          type: integer
          example: 123
    Paginatedultravox.v1.CorpusDocumentList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.CorpusDocument'
        total:
          type: integer
          example: 123
    Paginatedultravox.v1.CorpusList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.Corpus'
        total:
          type: integer
          example: 123
    Paginatedultravox.v1.CorpusSourceList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.CorpusSource'
        total:
          type: integer
          example: 123
    Paginatedultravox.v1.MessageList:
      required:
        - results
      type: object
      properties:
        next:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          format: uri
          nullable: true
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.Message'
        total:
          type: integer
          example: 123
    PatchedAPIKey:
      type: object
      properties:
        prefix:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        creator:
          type: string
          nullable: true
          readOnly: true
        name:
          type: string
          description: A free-form name for the API key. Need not be unique. 50 characters max.
          readOnly: true
        expiryDate:
          title: Expires
          type: string
          description: 'Once API key expires, clients cannot use it anymore.'
          format: date-time
          nullable: true
          readOnly: true
        revoked:
          type: boolean
          description: 'If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)'
    PatchedWebhook:
      type: object
      properties:
        webhookId:
          type: string
          format: uuid
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        url:
          maxLength: 200
          type: string
          format: uri
        secrets:
          type: array
          items:
            maxLength: 120
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventsEnum'
    Tool:
      required:
        - created
        - definition
        - name
        - ownership
        - statistics
        - toolId
      type: object
      properties:
        toolId:
          type: string
          format: uuid
          readOnly: true
        name:
          maxLength: 40
          type: string
        created:
          type: string
          format: date-time
          readOnly: true
        definition:
          $ref: '#/components/schemas/ultravox.v1.BaseToolDefinition'
        statistics:
          allOf:
            - $ref: '#/components/schemas/ToolStatistics'
          readOnly: true
        ownership:
          allOf:
            - $ref: '#/components/schemas/OwnershipEnum'
          readOnly: true
    ToolHistory:
      required:
        - call
        - errorCount
      type: object
      properties:
        call:
          allOf:
            - $ref: '#/components/schemas/Call'
          readOnly: true
        errorCount:
          type: integer
          readOnly: true
    ToolStatistics:
      required:
        - errorCount
        - timesCalled
      type: object
      properties:
        errorCount:
          type: integer
          default: 0
          readOnly: true
        timesCalled:
          type: integer
          default: 0
          readOnly: true
    Voice:
      required:
        - description
        - name
        - ownership
        - previewUrl
        - voiceId
      type: object
      properties:
        voiceId:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          readOnly: true
        description:
          type: string
          nullable: true
          readOnly: true
        previewUrl:
          type: string
          format: uri
          nullable: true
          readOnly: true
        ownership:
          allOf:
            - $ref: '#/components/schemas/OwnershipEnum'
          readOnly: true
    Webhook:
      required:
        - created
        - events
        - url
        - webhookId
      type: object
      properties:
        webhookId:
          type: string
          format: uuid
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        url:
          maxLength: 200
          type: string
          format: uri
        secrets:
          type: array
          items:
            maxLength: 120
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventsEnum'
    ultravox.v1.Corpus:
      type: object
      properties:
        corpusId:
          type: string
          description: The unique ID of this corpus.
        created:
          type: string
          description: When this corpus was created.
          format: date-time
        name:
          type: string
          description: The name of this corpus.
        description:
          type: string
          description: A description of this corpus.
        stats:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CorpusStats'
          description: The current stats for this corpus.
      description: "A queryable collection of documents. A corpus can be used to ground Ultravox\n with factual content for a particular domain."
    ultravox.v1.CorpusDocument:
      type: object
      properties:
        corpusId:
          type: string
          description: The id of the corpus in which this document is included.
        sourceId:
          type: string
          description: The id of the source that provides this document.
        documentId:
          type: string
          description: The unique ID of this document.
        created:
          type: string
          description: When this document was created.
          format: date-time
        mimeType:
          type: string
          description: "The MIME type of the document.\n https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types"
        metadata:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CorpusDocumentMetadata'
          description: Metadata about the document.
        sizeBytes:
          type: string
          description: 'The size of the document contents, in bytes.'
      description: "A single complete source of information included in a corpus. In the most\n straight-forward case, this could be an uploaded PDF or a single webpage.\n However, documents can also be created from other documents during processing,\n for example turning an HTML page into a markdown document."
    ultravox.v1.CorpusQueryResult:
      type: object
      properties:
        content:
          type: string
          description: The content of the retrieved chunk.
        score:
          type: number
          description: 'The score of this chunk, with higher scores indicating better matches.'
          format: double
        citation:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CorpusQueryResult_Citation'
          description: A citation for this chunk.
      description: A single result from a corpus query (corresponding to a chunk).
    ultravox.v1.CorpusSource:
      type: object
      properties:
        corpusId:
          type: string
          description: The id of this source's corpus.
        sourceId:
          type: string
          description: The unique ID of this source.
        created:
          type: string
          description: When this source was created.
          format: date-time
        name:
          type: string
          description: The name of this source.
        description:
          type: string
          description: A description of this source.
        stats:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.SourceStats'
          description: The current stats for this source.
        loadSpec:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.LoadSpec'
          description: How to load documents for this source.
      description: "A source of documents for building a corpus. A source defines where documents\n are pulled from."
    ultravox.v1.Message:
      type: object
      properties:
        role:
          enum:
            - MESSAGE_ROLE_UNSPECIFIED
            - MESSAGE_ROLE_USER
            - MESSAGE_ROLE_AGENT
            - MESSAGE_ROLE_TOOL_CALL
            - MESSAGE_ROLE_TOOL_RESULT
          type: string
          description: The message's role.
          format: enum
        text:
          type: string
          description: 'The message text for user and agent messages, tool arguments for tool_call messages, tool results for tool_result messages.'
        invocationId:
          type: string
          description: The invocation ID for tool messages. Used to pair tool calls with their results.
        toolName:
          type: string
          description: The tool name for tool messages.
        errorDetails:
          type: string
          description: "For failed tool calls, additional debugging information. While the text field is\n presented to the model so it can respond to failures gracefully, the full details\n are only exposed via the Ultravox REST API."
        medium:
          enum:
            - MESSAGE_MEDIUM_UNSPECIFIED
            - MESSAGE_MEDIUM_VOICE
            - MESSAGE_MEDIUM_TEXT
          type: string
          description: The medium of the message.
          format: enum
        callStageMessageIndex:
          type: integer
          description: The index of the message within the call stage.
          format: int32
        callStageId:
          type: string
          description: The call stage this message appeared in.
      description: A message exchanged during a call.
    google.protobuf.Value:
      description: 'Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.'
    ultravox.v1.AutomaticParameter:
      type: object
      properties:
        name:
          type: string
          description: The name of the parameter.
        location:
          enum:
            - PARAMETER_LOCATION_UNSPECIFIED
            - PARAMETER_LOCATION_QUERY
            - PARAMETER_LOCATION_PATH
            - PARAMETER_LOCATION_HEADER
            - PARAMETER_LOCATION_BODY
          type: string
          description: Where the parameter is used.
          format: enum
        knownValue:
          enum:
            - KNOWN_PARAM_UNSPECIFIED
            - KNOWN_PARAM_CALL_ID
            - KNOWN_PARAM_CONVERSATION_HISTORY
            - KNOWN_PARAM_OUTPUT_SAMPLE_RATE
          type: string
          description: The value to set for the parameter.
          format: enum
      description: A parameter that is automatically set by the system.
    ultravox.v1.BaseClientToolDetails:
      type: object
      description: Details for invoking a tool expected to be implemented by the client.
    ultravox.v1.BaseHttpToolDetails:
      type: object
      properties:
        baseUrlPattern:
          type: string
          description: 'The base URL pattern for the tool, possibly with placeholders for path parameters.'
        httpMethod:
          type: string
          description: The HTTP method for the tool.
      description: Details for invoking a tool via HTTP.
    ultravox.v1.BaseToolDefinition:
      type: object
      properties:
        modelToolName:
          type: string
          description: 'The name of the tool, as presented to the model. Must match ^[a-zA-Z0-9_-]{1,64}$.'
        description:
          type: string
          description: The description of the tool.
        dynamicParameters:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.DynamicParameter'
          description: The parameters that the tool accepts.
        staticParameters:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.StaticParameter'
          description: The static parameters added when the tool is invoked.
        automaticParameters:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.AutomaticParameter'
          description: Additional parameters that are automatically set by the system when the tool is invoked.
        requirements:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.ToolRequirements'
          description: Requirements that must be fulfilled when creating a call for the tool to be used.
        timeout:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: "The maximum amount of time the tool is allowed for execution. The conversation is frozen\n while tools run, so prefer sticking to the default unless you're comfortable with that\n consequence. If your tool is too slow for the default and can't be made faster, still try to\n keep this timeout as low as possible."
        precomputable:
          type: boolean
          description: "The tool is guaranteed to be non-mutating, repeatable, and free of side-effects. Such tools\n can safely be executed speculatively, reducing their effective latency. However, the fact they\n were called may not be reflected in the call history if their result ends up unused."
        http:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.BaseHttpToolDetails'
          description: Details for an HTTP tool.
        client:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.BaseClientToolDetails'
          description: "Details for a client-implemented tool. Only body parameters are allowed\n for client tools."
        defaultReaction:
          enum:
            - AGENT_REACTION_UNSPECIFIED
            - AGENT_REACTION_SPEAKS
            - AGENT_REACTION_LISTENS
            - AGENT_REACTION_SPEAKS_ONCE
          type: string
          description: "Indicates the default for how the agent should proceed after the tool is invoked.\n Can be overridden by the tool implementation via the X-Ultravox-Agent-Reaction\n header."
          format: enum
      description: "The base definition of a tool that can be used during a call. Exactly one\n implementation (http or client) should be set."
    ultravox.v1.CallMedium:
      type: object
      properties:
        webRtc:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium_WebRtcMedium'
          description: "The call will use WebRTC with the Ultravox client SDK.\n This is the default."
        twilio:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium_TwilioMedium'
          description: "The call will use Twilio's \"Media Streams\" protocol.\n Once you have a join URL from starting a call, include it in your\n TwiML like so:\n <Connect><Stream url=${your-join-url} /></Connect>\n This works for both inbound and outbound calls."
        serverWebSocket:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium_WebSocketMedium'
          description: "The call will use a plain websocket connection. This is unlikely to yield an acceptable user\n experience if used from a browser or mobile client, but may be suitable for a\n server-to-server connection. This option provides a simple way to connect your own server to\n an Ultravox inference instance."
        telnyx:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium_TelnyxMedium'
          description: "The call will use Telnyx's media streaming protocol.\n Once you have a join URL from starting a call, include it in your\n TexML like so:\n <Connect><Stream url=${your-join-url} bidirectionalMode=\"rtp\" /></Connect>\n This works for both inbound and outbound calls."
        plivo:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium_PlivoMedium'
          description: "The call will use Plivo's AudioStreams protocol.\n Once you have a join URL from starting a call, include it in your\n Plivo XML like so:\n <Stream keepCallAlive=\"true\" bidirectional=\"true\" contentType=\"audio/x-l16;rate=16000\">${your-join-url}</Stream>\n This works for both inbound and outbound calls."
        exotel:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium_ExotelMedium'
          description: "The call will use Exotel's \"Voicebot\" protocol.\n Once you have a join URL from starting a call, provide it to Exotel as the wss target URL\n for your Voicebot (either directly or more likely dynamically from your own server)."
      description: "Details about a call's protocol. By default, calls occur over WebRTC using\n the Ultravox client SDK. Setting a different call medium will prepare the\n server for a call using a different protocol.\n At most one call medium may be set."
    ultravox.v1.CallMedium_ExotelMedium:
      type: object
      description: Details for a Exotel call.
    ultravox.v1.CallMedium_PlivoMedium:
      type: object
      description: Details for a Plivo call.
    ultravox.v1.CallMedium_TelnyxMedium:
      type: object
      description: Details for a Telnyx call.
    ultravox.v1.CallMedium_TwilioMedium:
      type: object
      description: Details for a Twilio call.
    ultravox.v1.CallMedium_WebRtcMedium:
      type: object
      description: Details for a WebRTC call.
    ultravox.v1.CallMedium_WebSocketMedium:
      type: object
      properties:
        inputSampleRate:
          type: integer
          description: The sample rate for input (user) audio. Required.
          format: int32
        outputSampleRate:
          type: integer
          description: 'The desired sample rate for output (agent) audio. If unset, defaults to the input_sample_rate.'
          format: int32
        clientBufferSizeMs:
          type: integer
          description: "The size of the client-side audio buffer in milliseconds. Smaller buffers allow for faster\n interruptions but may cause audio underflow if network latency fluctuates too greatly. For\n the best of both worlds, set this to some large value (e.g. 30000) and implement support for\n playback_clear_buffer messages. Defaults to 60."
          format: int32
      description: Details for a WebSocket call.
    ultravox.v1.CallTool:
      type: object
      properties:
        description:
          type: string
          description: The description of the tool.
        dynamicParameters:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.DynamicParameter'
          description: The parameters presented to the model.
        staticParameters:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.StaticParameter'
          description: Parameters added unconditionally when the tool is invoked.
        automaticParameters:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.AutomaticParameter'
          description: Parameters automatically set by the system.
        timeout:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: "The maximum amount of time the tool is allowed for execution. The conversation is frozen\n while tools run, so prefer sticking to the default unless you're comfortable with that\n consequence. If your tool is too slow for the default and can't be made faster, still try to\n keep this timeout as low as possible."
        precomputable:
          type: boolean
          description: "The tool is guaranteed to be non-mutating, repeatable, and free of side-effects. Such tools\n can safely be executed speculatively, reducing their effective latency. However, the fact they\n were called may not be reflected in the call history if their result ends up unused."
        http:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.HttpCallToolDetails'
          description: Details for an HTTP tool.
        client:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.ClientCallToolDetails'
          description: "Details for a client-implemented tool. Only body parameters are allowed\n for client tools."
        defaultReaction:
          enum:
            - AGENT_REACTION_UNSPECIFIED
            - AGENT_REACTION_SPEAKS
            - AGENT_REACTION_LISTENS
            - AGENT_REACTION_SPEAKS_ONCE
          type: string
          description: "Indicates the default for how the agent should proceed after the tool is invoked.\n Can be overridden by the tool implementation via the X-Ultravox-Agent-Reaction\n header."
          format: enum
      description: A tool as used for a particular call (omitting auth details).
    ultravox.v1.ClientCallToolDetails:
      type: object
      description: Details for a CallTool implemented by the client.
    ultravox.v1.CorpusDocumentMetadata:
      type: object
      properties:
        publicUrl:
          type: string
          description: 'The public URL of the document, if any.'
        language:
          type: string
          description: 'The BCP47 language code of the document, if known.'
        title:
          type: string
          description: 'The title of the document, if known.'
        description:
          type: string
          description: 'A description of the document, if known.'
        published:
          type: string
          description: 'The timestamp that the document was published, if known.'
          format: date-time
      description: "Metadata about a document. This is typically not included in the document's\n chunks, but can be used for filtering or citations.\n Derived documents inherit metadata from their source documents in general."
    ultravox.v1.CorpusQueryResult_Citation:
      type: object
      properties:
        sourceId:
          type: string
          description: The source that provided the document from which this chunk was retrieved.
        documentId:
          type: string
          description: The document from which this chunk was retrieved.
        publicUrl:
          type: string
          description: 'The public URL of the document, if any.'
        title:
          type: string
          description: 'The title of the document, if known.'
      description: A citation for a query result.
    ultravox.v1.CorpusStats:
      type: object
      properties:
        status:
          enum:
            - CORPUS_STATUS_UNSPECIFIED
            - CORPUS_STATUS_EMPTY
            - CORPUS_STATUS_INITIALIZING
            - CORPUS_STATUS_READY
            - CORPUS_STATUS_UPDATING
          type: string
          description: 'The current status of this corpus, indicating whether it is queryable.'
          format: enum
        lastUpdated:
          type: string
          description: The last time the contents of this corpus were updated.
          format: date-time
        numChunks:
          type: integer
          description: The number of chunks in this corpus. Chunks are subsets of documents.
          format: int32
        numDocs:
          type: integer
          description: The number of documents in this corpus.
          format: int32
        numVectors:
          type: integer
          description: "The number of vectors in this corpus. Vectors are used for semantic search.\n Multiple vectors may correspond to a single chunk."
          format: int32
      description: "The current stats for a corpus. This gives an indication of whether the\n corpus is queryable and what sorts of results can be expected."
    ultravox.v1.DynamicParameter:
      type: object
      properties:
        name:
          type: string
          description: The name of the parameter.
        location:
          enum:
            - PARAMETER_LOCATION_UNSPECIFIED
            - PARAMETER_LOCATION_QUERY
            - PARAMETER_LOCATION_PATH
            - PARAMETER_LOCATION_HEADER
            - PARAMETER_LOCATION_BODY
          type: string
          description: Where the parameter is used.
          format: enum
        schema:
          type: object
          description: "The JsonSchema definition of the parameter. This typically\n includes things like type, description, enum values, format,\n other restrictions, etc."
        required:
          type: boolean
          description: Whether the parameter is required.
      description: A dynamic parameter the tool accepts that may be set by the model.
    ultravox.v1.FirstSpeakerSettings:
      type: object
      properties:
        user:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.FirstSpeakerSettings_UserGreeting'
          description: 'If set, the user should speak first.'
        agent:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.FirstSpeakerSettings_AgentGreeting'
          description: 'If set, the agent should speak first.'
      description: "Settings for the initial message to get a conversation started.\n Exactly one of user or agent should be set. The default is agent\n (unless firstSpeaker is also set, in which case the default will\n match that)."
    ultravox.v1.FirstSpeakerSettings_AgentGreeting:
      type: object
      properties:
        uninterruptible:
          type: boolean
          description: "Whether the user should be prevented from interrupting the agent's first message.\n Defaults to false (meaning the agent is interruptible as usual)."
        text:
          type: string
          description: 'What the agent should say. If unset, the model will generate a greeting.'
      description: Additional properties for when the agent speaks first.
    ultravox.v1.FirstSpeakerSettings_UserGreeting:
      type: object
      description: Additional properties for when the user speaks first.
    ultravox.v1.HeaderApiKeyRequirement:
      type: object
      properties:
        name:
          type: string
          description: The name of the header.
      description: A security requirement that will cause an API key to be added to the header.
    ultravox.v1.HttpAuthRequirement:
      type: object
      properties:
        scheme:
          type: string
          description: 'The scheme of the HTTP authentication, e.g. "Bearer".'
      description: A security requirement that will cause an HTTP authentication header to be added.
    ultravox.v1.HttpCallToolDetails:
      type: object
      properties:
        baseUrlPattern:
          type: string
          description: 'The base URL pattern for the tool, possibly with placeholders for path parameters.'
        httpMethod:
          type: string
          description: The HTTP method for the tool.
        authHeaders:
          type: array
          items:
            type: string
          description: Auth headers added when the tool is invoked.
        authQueryParams:
          type: array
          items:
            type: string
          description: Auth query parameters added when the tool is invoked.
        callTokenScopes:
          type: array
          items:
            type: string
          description: "If the tool requires a call token, the scopes that must be present in the token.\n If this is empty, no call token will be created."
      description: Details for a CallTool implemented via HTTP requests.
    ultravox.v1.LoadSpec:
      type: object
      properties:
        maxDocuments:
          type: integer
          description: The maximum number of documents to ingest.
          format: int32
        maxDocumentBytes:
          type: integer
          description: The maximum size of an individual document in bytes.
          format: int32
        relevantDocumentTypes:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.MimeTypeFilter'
          description: "The types of documents to keep. Any documents surfaced during loading\n that don't match this filter will be discarded. If not set, Ultravox will\n choose a default that includes types known to provide real value."
        startUrls:
          type: array
          items:
            type: string
          description: "The list of start URLs for crawling. If max_depth is 1, only these URLs will\n be fetched. Otherwise, links from these urls will be followed up to the\n max_depth."
        maxDepth:
          type: integer
          description: "The maximum depth of links to traverse. Use 1 to only fetch the startUrls,\n 2 to fetch the startUrls and documents directly linked from them, 3 to\n additionally fetch documents linked from those (excluding anything already\n seen), etc."
          format: int32
      description: The specification of how to acquire documents for this source.
    ultravox.v1.MimeTypeFilter:
      type: object
      properties:
        include:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.MimeTypeSet'
          description: Mime types must be in this set to be kept.
        exclude:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.MimeTypeSet'
          description: Mime types must not be in this set to be kept.
      description: A Filter to apply to mime types.
    ultravox.v1.MimeTypeSet:
      type: object
      properties:
        mimeTypes:
          type: array
          items:
            type: string
          description: The mime types in this set.
      description: "A set of mime types. Entries may be a full mime type (e.g. \"text/html\") or a\n type without a subtype (e.g. \"text\"). Entries without a subtype will match\n all subtypes (e.g. \"text\" will match \"text/html\", \"text/plain\", etc.)."
    ultravox.v1.QueryApiKeyRequirement:
      type: object
      properties:
        name:
          type: string
          description: The name of the query parameter.
      description: A security requirement that will cause an API key to be added to the query string.
    ultravox.v1.QueryCorpusRequest:
      type: object
      properties:
        query:
          type: string
          description: The query to run.
        maxResults:
          type: integer
          description: The maximum number of results to return.
          format: int32
      description: A request to query a corpus.
    ultravox.v1.SecurityOptions:
      type: object
      properties:
        options:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.SecurityRequirements'
          description: "The options for security. Only one must be met. The first one that can be\n satisfied will be used in general. The single exception to this rule is\n that we always prefer a non-empty set of requirements over an empty set\n unless no non-empty set can be satisfied."
      description: The different options for satisfying a tool's security requirements.
    ultravox.v1.SecurityRequirement:
      type: object
      properties:
        queryApiKey:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.QueryApiKeyRequirement'
          description: An API key must be added to the query string.
        headerApiKey:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.HeaderApiKeyRequirement'
          description: An API key must be added to a custom header.
        httpAuth:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.HttpAuthRequirement'
          description: The HTTP authentication header must be added.
      description: "A single security requirement that must be met for a tool to be available. Exactly one\n of query_api_key, header_api_key, or http_auth should be set."
    ultravox.v1.SecurityRequirements:
      type: object
      properties:
        requirements:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ultravox.v1.SecurityRequirement'
          description: Requirements keyed by name.
        ultravoxCallTokenRequirement:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.UltravoxCallTokenRequirement'
          description: "An additional special security requirement that can be automatically fulfilled\n during call creation. If a tool has this requirement set, a token identifying\n the call and relevant scopes will be created during call creation and set as\n an X-Ultravox-Call-Token header when the tool is invoked.\n Such tokens are only verifiable by the Ultravox service and primarily exist\n for built-in tools (though it's possible for third-party tools that wrap a\n built-in tool to make use of them as well)."
      description: The security requirements for a request. All requirements must be met.
    ultravox.v1.SelectedTool:
      type: object
      properties:
        toolId:
          type: string
          description: The ID of an existing base tool.
        toolName:
          type: string
          description: The name of an existing base tool. The name must uniquely identify the tool.
        temporaryTool:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.BaseToolDefinition'
          description: "A temporary tool definition, available only for this call (and subsequent\n calls created using priorCallId without overriding selected tools)."
        nameOverride:
          type: string
          description: "An override for the model_tool_name. This is primarily useful when using\n multiple instances of the same durable tool (presumably with different\n parameter overrides.) The set of tools used within a call must have a unique\n set of model names and every name must match this pattern: ^[a-zA-Z0-9_-]{1,64}$."
        authTokens:
          type: object
          additionalProperties:
            type: string
          description: Auth tokens used to satisfy the tool's security requirements.
        parameterOverrides:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/google.protobuf.Value'
          description: "Static values to use in place of dynamic parameters. Any parameter included\n here will be hidden from the model and the static value will be used instead.\n Some tools may require certain parameters to be overridden, but any parameter\n can be overridden regardless of whether it is required to be."
      description: "A tool selected for a particular call. Exactly one of tool_id, tool_name, or\n temporary_tool should be set."
    ultravox.v1.SourceStats:
      type: object
      properties:
        status:
          enum:
            - SOURCE_STATUS_UNSPECIFIED
            - SOURCE_STATUS_INITIALIZING
            - SOURCE_STATUS_READY
            - SOURCE_STATUS_UPDATING
          type: string
          description: 'The current status of this source, indicating whether it affects queries.'
          format: enum
        lastUpdated:
          type: string
          description: When this source last finished contributing contents to its corpus.
          format: date-time
        numDocs:
          type: integer
          description: "The number of documents in this source. This includes both loaded documents\n and derived documents."
          format: int32
      description: The current stats for a source.
    ultravox.v1.StartCallRequest:
      type: object
      properties:
        systemPrompt:
          type: string
          description: The system prompt provided to the model during generations.
        temperature:
          type: number
          description: 'The model temperature, between 0 and 1. Defaults to 0.'
          format: float
        model:
          type: string
          description: The model used for generations. Defaults to fixie-ai/ultravox.
        voice:
          type: string
          description: The ID (or name if unique) of the voice the agent should use for this call.
        languageHint:
          type: string
          description: A BCP47 language code that may be used to guide speech recognition and synthesis.
        initialMessages:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.Message'
          description: The conversation history to start from for this call.
        joinTimeout:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: A timeout for joining the call. Defaults to 30 seconds.
        maxDuration:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: The maximum duration of the call. Defaults to 1 hour.
        timeExceededMessage:
          type: string
          description: What the agent should say immediately before hanging up if the call's time limit is reached.
        inactivityMessages:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.TimedMessage'
          description: "Messages spoken by the agent when the user is inactive for the specified duration.\n Durations are cumulative, so a message m > 1 with duration 30s will be spoken 30 seconds after message m-1."
        selectedTools:
          type: array
          items:
            $ref: '#/components/schemas/ultravox.v1.SelectedTool'
          description: The tools available to the agent for (the first stage of) this call.
        medium:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.CallMedium'
          description: The medium used for this call.
        recordingEnabled:
          type: boolean
          description: Whether the call should be recorded.
        firstSpeaker:
          enum:
            - FIRST_SPEAKER_UNSPECIFIED
            - FIRST_SPEAKER_AGENT
            - FIRST_SPEAKER_USER
          type: string
          description: "Who should talk first when the call starts. Typically set to FIRST_SPEAKER_USER for outgoing\n calls and left as the default (FIRST_SPEAKER_AGENT) otherwise.\n Deprecated. Prefer `firstSpeakerSettings`. If both are set, they must match."
          format: enum
        transcriptOptional:
          type: boolean
          description: Indicates whether a transcript is optional for the call.
        initialOutputMedium:
          enum:
            - MESSAGE_MEDIUM_UNSPECIFIED
            - MESSAGE_MEDIUM_VOICE
            - MESSAGE_MEDIUM_TEXT
          type: string
          description: "The medium to use for the call initially. May be altered by the client later.\n Defaults to voice."
          format: enum
        vadSettings:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.VadSettings'
          description: VAD settings for the call.
        firstSpeakerSettings:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.FirstSpeakerSettings'
          description: "The settings for the initial message to get a conversation started.\n Defaults to `agent: {}` which means the agent will start the conversation with an\n (interruptible) greeting generated based on the system prompt and any initial messages.\n (If first_speaker is set and this is not, first_speaker will be used instead.)"
        experimentalSettings:
          type: object
          description: Experimental settings for the call.
        metadata:
          type: object
          additionalProperties:
            type: string
          description: "Optional metadata key-value pairs to associate with the call. All values must be strings.\n Keys may not start with \"ultravox.\", which is reserved for system-provided metadata."
      description: A request to start a call.
    ultravox.v1.StaticParameter:
      type: object
      properties:
        name:
          type: string
          description: The name of the parameter.
        location:
          enum:
            - PARAMETER_LOCATION_UNSPECIFIED
            - PARAMETER_LOCATION_QUERY
            - PARAMETER_LOCATION_PATH
            - PARAMETER_LOCATION_HEADER
            - PARAMETER_LOCATION_BODY
          type: string
          description: Where the parameter is used.
          format: enum
        value:
          allOf:
            - $ref: '#/components/schemas/google.protobuf.Value'
          description: The value of the parameter.
      description: "A static parameter that is unconditionally added when the tool is invoked. This\n parameter is not exposed to or set by the model."
    ultravox.v1.TimedMessage:
      type: object
      properties:
        duration:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: The duration after which the message should be spoken.
        message:
          type: string
          description: The message to speak.
        endBehavior:
          enum:
            - END_BEHAVIOR_UNSPECIFIED
            - END_BEHAVIOR_HANG_UP_SOFT
            - END_BEHAVIOR_HANG_UP_STRICT
          type: string
          description: The behavior to exhibit when the message is finished being spoken.
          format: enum
      description: "A message the agent should say after some duration. The duration's meaning\n varies depending on the context."
    ultravox.v1.ToolRequirements:
      type: object
      properties:
        httpSecurityOptions:
          allOf:
            - $ref: '#/components/schemas/ultravox.v1.SecurityOptions'
          description: Security requirements for an HTTP tool.
        requiredParameterOverrides:
          type: array
          items:
            type: string
          description: Dynamic parameters that must be overridden with an explicit (static) value.
      description: 'The requirements for using a tool, which must be satisfied when creating a call with the tool.'
    ultravox.v1.UltravoxCallTokenRequirement:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
          description: The scopes that must be present in the token.
      description: "A security requirement that will automatically be fulfilled during call creation.\n The generated token will be set as an X-Ultravox-Call-Token header when the tool\n is invoked. The token is only verifiable by the Ultravox service and should not be\n used for authentication by any other service.\n The token will also be invalid as soon as the call is completed."
    ultravox.v1.VadSettings:
      type: object
      properties:
        turnEndpointDelay:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: "The minimum amount of time the agent will wait to respond after the user seems to be done\n speaking. Increasing this value will make the agent less eager to respond, which may increase\n perceived response latency but will also make the agent less likely to jump in before the user\n is really done speaking.\n\n Built-in VAD currently operates on 32ms frames, so only multiples of 32ms are meaningful.\n (Anything from 1ms to 31ms will produce the same result.)\n\n Defaults to \"0.384s\" (384ms) as a starting point, but there's nothing special about this value\n aside from it corresponding to 12 VAD frames."
        minimumTurnDuration:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: "The minimum duration of user speech required to be considered a user turn.\n Increasing this value will cause the agent to ignore short user audio. This may be useful in\n particularly noisy environments, but it comes at the cost of possibly ignoring very short\n user responses such as \"yes\" or \"no\".\n\n Defaults to \"0s\" meaning the agent considers all user audio inputs (that make it through\n built-in noise cancellation)."
        minimumInterruptionDuration:
          pattern: '^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$'
          type: string
          description: "The minimum duration of user speech required to interrupt the agent. This works the same way\n as minimumTurnDuration, but allows for a higher threshold for interrupting the agent. (This\n value will be ignored if it is less than minimumTurnDuration.)\n\n Defaults to \"0.09s\" (90ms) as a starting point, but there's nothing special about this value."
        frameActivationThreshold:
          type: number
          description: "The threshold for the VAD to consider a frame as speech. This is a value between 0.1 and 1.\n\n Miniumum value is 0.1, which is the default value."
          format: float
      description: Call-level VAD settings.
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      description: API key
      name: X-API-Key
      in: header
security:
  - apiKeyAuth: [ ]